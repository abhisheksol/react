1️⃣ Controlled Inputs (Real-time Update)
tsx
Copy
Edit
import React, { useState } from "react";

const ControlledInputs = () => {
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");

  return (
    <div className="p-4 border rounded text-center">
      <h3 className="font-bold">Controlled Inputs</h3>
      <input
        type="text"
        placeholder="First Name"
        value={firstName}
        onChange={(e) => setFirstName(e.target.value)}
        className="border p-2 m-2"
      />
      <input
        type="text"
        placeholder="Last Name"
        value={lastName}
        onChange={(e) => setLastName(e.target.value)}
        className="border p-2 m-2"
      />
      <p className="mt-2 text-lg">Hello, {firstName} {lastName}!</p>
    </div>
  );
};
2️⃣ Uncontrolled Inputs with Refs (Updates on Submit)
tsx
Copy
Edit
import React, { useRef, useState } from "react";

const UncontrolledInputs = () => {
  const firstNameRef = useRef<HTMLInputElement>(null);
  const lastNameRef = useRef<HTMLInputElement>(null);
  const [greeting, setGreeting] = useState("");

  const handleSubmit = () => {
    const firstName = firstNameRef.current?.value || "";
    const lastName = lastNameRef.current?.value || "";
    setGreeting(`Hello, ${firstName} ${lastName}!`);
  };

  return (
    <div className="p-4 border rounded text-center mt-4">
      <h3 className="font-bold">Uncontrolled Inputs</h3>
      <input type="text" placeholder="First Name" ref={firstNameRef} className="border p-2 m-2" />
      <input type="text" placeholder="Last Name" ref={lastNameRef} className="border p-2 m-2" />
      <button onClick={handleSubmit} className="bg-blue-500 text-white px-4 py-2 rounded mt-2">
        Submit
      </button>
      <p className="mt-2 text-lg">{greeting}</p>
    </div>
  );
};
3️⃣ Other Input Types (Select, Radio, Checkbox, Textarea)
tsx
Copy
Edit
import React, { useState } from "react";

const OtherInputs = () => {
  const [gender, setGender] = useState("");
  const [agreed, setAgreed] = useState(false);
  const [bio, setBio] = useState("");

  return (
    <div className="p-4 border rounded text-center mt-4">
      <h3 className="font-bold">Other Input Types</h3>

      <label>
        Gender:
        <select value={gender} onChange={(e) => setGender(e.target.value)} className="border p-2 m-2">
          <option value="">Select</option>
          <option value="Male">Male</option>
          <option value="Female">Female</option>
        </select>
      </label>

      <div className="mt-2">
        <input
          type="checkbox"
          checked={agreed}
          onChange={() => setAgreed(!agreed)}
        />
        <span className="ml-2">I agree to the terms</span>
      </div>

      <textarea
        placeholder="Enter your bio..."
        value={bio}
        onChange={(e) => setBio(e.target.value)}
        className="border p-2 m-2 w-full"
      ></textarea>

      <p className="mt-2 text-lg">Gender: {gender}, Agreed: {agreed ? "Yes" : "No"}</p>
      <p className="text-sm">Bio: {bio}</p>
    </div>
  );
};
📌 Full App with All Exercises
tsx
Copy
Edit
const App = () => {
  return (
    <div className="p-6 max-w-lg mx-auto">
      <ControlledInputs />
      <UncontrolledInputs />
      <OtherInputs />
    </div>
  );
};

export default App;







-----------------------------------------------------------------


1️⃣ Clear Shopping List (Using Reducer)
tsx
Copy
Edit
import React, { useReducer } from "react";

type Action = { type: "ADD_ITEM"; item: string } | { type: "CLEAR" };

const reducer = (state: string[], action: Action): string[] => {
  switch (action.type) {
    case "ADD_ITEM":
      return [...state, action.item];
    case "CLEAR":
      return [];
    default:
      return state;
  }
};

const ShoppingList = () => {
  const [list, dispatch] = useReducer(reducer, []);

  return (
    <div className="p-4 border rounded text-center">
      <h3 className="font-bold">Shopping List</h3>
      <button onClick={() => dispatch({ type: "ADD_ITEM", item: "Apple" })} className="bg-green-500 text-white px-4 py-2 m-2">
        Add Apple
      </button>
      <button onClick={() => dispatch({ type: "CLEAR" })} className="bg-red-500 text-white px-4 py-2">
        Clear List
      </button>
      <ul className="mt-2">
        {list.map((item, index) => (
          <li key={index} className="border p-2 m-1">{item}</li>
        ))}
      </ul>
    </div>
  );
};
2️⃣ Room with Adjustable Light Levels
tsx
Copy
Edit
import React, { useState } from "react";

const levels = ["Off", "Low", "Medium", "High"];

const LightRoom = () => {
  const [level, setLevel] = useState(0);

  const increaseLevel = () => setLevel((prev) => (prev + 1) % levels.length);
  const turnOff = () => setLevel(0);

  return (
    <div className="p-4 border rounded text-center mt-4">
      <h3 className="font-bold">Light Room</h3>
      <p className="text-lg">Light Level: {levels[level]}</p>
      <button onClick={increaseLevel} className="bg-blue-500 text-white px-4 py-2 m-2">
        Increase Light
      </button>
      <button onClick={turnOff} className="bg-gray-500 text-white px-4 py-2">
        Turn Off
      </button>
    </div>
  );
};
3️⃣ Keypad Unlock System
tsx
Copy
Edit
import React, { useState } from "react";

const correctCode = [1, 3, 5, 2, 4, 6];

const Keypad = () => {
  const [input, setInput] = useState<number[]>([]);

  const handlePress = (num: number) => {
    if (num === correctCode[input.length]) {
      setInput([...input, num]);
      if (input.length + 1 === correctCode.length) {
        alert("Unlocked!");
        setInput([]);
      }
    } else {
      setInput([]); // Reset on incorrect input
    }
  };

  return (
    <div className="p-4 border rounded text-center mt-4">
      <h3 className="font-bold">Keypad Lock</h3>
      <p className="text-lg">Progress: {input.length} / {correctCode.length}</p>
      <div className="flex flex-wrap justify-center">
        {[1, 2, 3, 4, 5, 6].map((num) => (
          <button
            key={num}
            onClick={() => handlePress(num)}
            className="bg-gray-700 text-white px-4 py-2 m-1 rounded"
          >
            {num}
          </button>
        ))}
      </div>
    </div>
  );
};
📌 Full App with All Exercises
tsx
Copy
Edit
const App = () => {
  return (
    <div className="p-6 max-w-lg mx-auto">
      <ShoppingList />
      <LightRoom />
      <Keypad />
    </div>
  );
};

export default App;
🔥 Features Implemented
✅ Shopping List with Clear Button (Reducer-based)
✅ Light Room with 4 Levels (Off, Low, Medium, High)
✅ Keypad Unlock System (Correct sequence tracking)

Let me know if you need modifications! 🚀





----------------------------------------------------------------

Controlled Inputs for First Name and Last Name

jsx
Copy
Edit
import React, { useState } from "react";

function ControlledForm() {
    const [firstName, setFirstName] = useState("");
    const [lastName, setLastName] = useState("");

    return (
        <div>
            <label>
                First Name: <input value={firstName} onChange={(e) => setFirstName(e.target.value)} />
            </label>
            <br />
            <label>
                Last Name: <input value={lastName} onChange={(e) => setLastName(e.target.value)} />
            </label>
            <p>Hello, {firstName} {lastName}!</p>
        </div>
    );
}

export default ControlledForm;
Uncontrolled Inputs with Refs

jsx
Copy
Edit
import React, { useRef, useState } from "react";

function UncontrolledForm() {
    const firstNameRef = useRef();
    const lastNameRef = useRef();
    const [displayText, setDisplayText] = useState("");

    const handleSubmit = () => {
        setDisplayText(`Hello, ${firstNameRef.current.value} ${lastNameRef.current.value}!`);
    };

    return (
        <div>
            <label>
                First Name: <input ref={firstNameRef} />
            </label>
            <br />
            <label>
                Last Name: <input ref={lastNameRef} />
            </label>
            <br />
            <button onClick={handleSubmit}>Submit</button>
            <p>{displayText}</p>
        </div>
    );
}

export default UncontrolledForm;
Second Set of Exercises
Clear Shopping List with Redux

Assuming Redux is set up, the reducer would handle a "clear" action:
jsx
Copy
Edit
function shoppingListReducer(state = [], action) {
    switch (action.type) {
        case "clear":
            return [];
        default:
            return state;
    }
}
Dispatch action on button click:
jsx
Copy
Edit
import { useDispatch } from "react-redux";

function ClearButton() {
    const dispatch = useDispatch();

    return <button onClick={() => dispatch({ type: "clear" })}>Clear List</button>;
}

export default ClearButton;
Room with Light Control

jsx
Copy
Edit
import React, { useState } from "react";

function LightRoom() {
    const levels = ["off", "low", "medium", "high"];
    const [levelIndex, setLevelIndex] = useState(0);

    const changeLightLevel = () => {
        setLevelIndex((prev) => (prev + 1) % levels.length);
    };

    const turnOff = () => setLevelIndex(0);

    return (
        <div>
            <p>Light Level: {levels[levelIndex]}</p>
            <button onClick={changeLightLevel}>Increase Light</button>
            <button onClick={turnOff}>Turn Off</button>
        </div>
    );
}

export default LightRoom;
Keypad Unlock System

jsx
Copy
Edit
import React, { useState } from "react";

const correctCode = [1, 3, 5];

function Keypad() {
    const [enteredCode, setEnteredCode] = useState([]);

    const handleButtonPress = (num) => {
        const newCode = [...enteredCode, num];
        if (newCode.join(",") === correctCode.slice(0, newCode.length).join(",")) {
            if (newCode.length === correctCode.length) {
                alert("Unlocked!");
                setEnteredCode([]);
            } else {
                setEnteredCode(newCode);
            }
        } else {
            alert("Incorrect!");
            setEnteredCode([]);
        }
    };

    return (
        <div>
            {[1, 2, 3, 4, 5, 6].map((num) => (
                <button key={num} onClick={() => handleButtonPress(num)}>
                    {num}
                </button>
            ))}
        </div>
    );
}

export default Keypad;
Third Set of Exercises
useState with Input and document.title

jsx
Copy
Edit
import React, { useState, useEffect } from "react";

function TitleUpdater() {
    const [text, setText] = useState("");

    useEffect(() => {
        document.title = text;
    }, [text]);

    return <input value={text} onChange={(e) => setText(e.target.value)} placeholder="Type something..." />;
}

export default TitleUpdater;
Click Handler on Document

jsx
Copy
Edit
import React, { useEffect } from "react";

function ClickLogger() {
    useEffect(() => {
        const handleClick = () => console.log("User clicked!");

        document.addEventListener("click", handleClick);
        
        return () => {
            document.removeEventListener("click", handleClick);
        };
    }, []);

    return <p>Click anywhere to log a message!</p>;
}

export default ClickLogger;
Error Handling for Reddit API

jsx
Copy
Edit
import React, { useState } from "react";

function RedditFetcher() {
    const [subreddit, setSubreddit] = useState("");
    const [data, setData] = useState(null);
    const [error, setError] = useState(null);

    const fetchData = async () => {
        setError(null);
        try {
            const response = await fetch(`https://www.reddit.com/r/${subreddit}.json`);
            if (!response.ok) throw new Error("Subreddit not found");
            const result = await response.json();
            setData(result);
        } catch (err) {
            setError(err.message);
        }
    };

    return (
        <div> <input value={subreddit} onChange={(e) => setSubreddit(e.target.value)} placeholder="Enter subreddit" />
            <button onClick={fetchData}>Fetch</button>
            {error && <p style={{ color: "red" }}>{error}</p>}
            {data && <p>Data loaded successfully!</p>}
        </div>
    );
}

export default RedditFetcher;