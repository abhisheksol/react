Exercise 1: Controlled Inputs
Create a React component with controlled inputs for the First Name and Last Name. Controlled inputs use useState to manage the input value in React.

jsx
Copy
Edit
import React, { useState } from "react";

const ControlledInputs = () => {
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");

  return (
    <div>
      <label>
        First Name:
        <input
          type="text"
          value={firstName}
          onChange={(e) => setFirstName(e.target.value)}
        />
      </label>
      <br />
      <label>
        Last Name:
        <input
          type="text"
          value={lastName}
          onChange={(e) => setLastName(e.target.value)}
        />
      </label>
      <br />
      <h3>Hello, {firstName} {lastName}!</h3>
    </div>
  );
};

export default ControlledInputs;
Exercise 2: Uncontrolled Inputs
Use refs instead of useState to store values. This is useful when you don’t want React to re-render on every keystroke.

jsx
Copy
Edit
import React, { useRef, useState } from "react";

const UncontrolledInputs = () => {
  const firstNameRef = useRef(null);
  const lastNameRef = useRef(null);
  const [displayName, setDisplayName] = useState("");

  const handleSubmit = () => {
    setDisplayName(`Hello, ${firstNameRef.current.value} ${lastNameRef.current.value}!`);
  };

  return (
    <div>
      <label>
        First Name:
        <input type="text" ref={firstNameRef} />
      </label>
      <br />
      <label>
        Last Name:
        <input type="text" ref={lastNameRef} />
      </label>
      <br />
      <button onClick={handleSubmit}>Submit</button>
      <h3>{displayName}</h3>
    </div>
  );
};

export default UncontrolledInputs;
Exercise 3: Other Input Types (Radio, Checkbox, Select, Textarea)
jsx
Copy
Edit
import React, { useState } from "react";

const OtherInputs = () => {
  const [letter, setLetter] = useState("a");
  const [isChecked, setIsChecked] = useState(false);
  const [selectedOption, setSelectedOption] = useState("");
  const [textAreaValue, setTextAreaValue] = useState("");

  return (
    <form>
      {/* Radio Buttons */}
      <label>
        <input
          type="radio"
          value="a"
          checked={letter === "a"}
          onChange={(e) => setLetter(e.target.value)}
        />
        A
      </label>
      <label>
        <input
          type="radio"
          value="b"
          checked={letter === "b"}
          onChange={(e) => setLetter(e.target.value)}
        />
        B
      </label>

      {/* Checkbox */}
      <label>
        <input
          type="checkbox"
          checked={isChecked}
          onChange={() => setIsChecked(!isChecked)}
        />
        Check me
      </label>

      {/* Select Dropdown */}
      <label>
        Select an option:
        <select value={selectedOption} onChange={(e) => setSelectedOption(e.target.value)}>
          <option value="">--Choose--</option>
          <option value="option1">Option 1</option>
          <option value="option2">Option 2</option>
        </select>
      </label>

      {/* Textarea */}
      <label>
        Enter text:
        <textarea
          value={textAreaValue}
          onChange={(e) => setTextAreaValue(e.target.value)}
        />
      </label>

      <h3>Radio selected: {letter}</h3>
      <h3>Checkbox is {isChecked ? "checked" : "unchecked"}</h3>
      <h3>Selected option: {selectedOption}</h3>
      <h3>Textarea content: {textAreaValue}</h3>
    </form>
  );
};

export default OtherInputs;


--------------------------------------------------------------------

1. Clear Shopping List Button (Using useReducer)
This solution assumes you're managing a shopping list using the useReducer hook. The "clear" button dispatches an action to reset the list.

jsx
Copy
Edit
import React, { useReducer } from 'react';

const shoppingReducer = (state, action) => {
  switch (action.type) {
    case 'ADD_ITEM':
      return [...state, action.item];
    case 'CLEAR':
      return []; // Reset the list
    default:
      return state;
  }
};

const ShoppingList = () => {
  const [items, dispatch] = useReducer(shoppingReducer, ['Apples', 'Bananas']);

  return (
    <div>
      <h2>Shopping List</h2>
      <ul>
        {items.map((item, index) => (
          <li key={index}>{item}</li>
        ))}
      </ul>
      <button onClick={() => dispatch({ type: 'CLEAR' })}>Clear List</button>
    </div>
  );
};

export default ShoppingList;
2. Room Light Levels (useState)
This solution creates a light control system with four levels and a reset button.

jsx
Copy
Edit
import React, { useState } from 'react';

const LIGHT_LEVELS = ['Off', 'Low', 'Medium', 'High'];

const RoomLight = () => {
  const [level, setLevel] = useState(0);

  const nextLevel = () => {
    setLevel((prevLevel) => (prevLevel + 1) % LIGHT_LEVELS.length);
  };

  const turnOff = () => {
    setLevel(0);
  };

  return (
    <div>
      <h2>Room Light</h2>
      <p>Light Level: {LIGHT_LEVELS[level]}</p>
      <button onClick={nextLevel}>Increase Light</button>
      <button onClick={turnOff}>Turn Off</button>
    </div>
  );
};

export default RoomLight;
3. Keypad Unlock System
This solution implements a 6-button keypad where users must press buttons in a specific order to unlock.

jsx
Copy
Edit
import React, { useState } from 'react';

const CORRECT_SEQUENCE = ['1', '3', '2', '4', '6', '5']; // Example correct order

const Keypad = () => {
  const [input, setInput] = useState([]);

  const handlePress = (num) => {
    const newInput = [...input, num];

    if (newInput.join('') === CORRECT_SEQUENCE.join('')) {
      alert('Unlocked!');
      setInput([]);
    } else if (!CORRECT_SEQUENCE.slice(0, newInput.length).every((v, i) => v === newInput[i])) {
      setInput([]); // Reset if incorrect
    } else {
      setInput(newInput);
    }
  };

  return (
    <div>
      <h2>Keypad</h2>
      <p>Enter the correct sequence to unlock</p>
      <div>
        {[1, 2, 3, 4, 5, 6].map((num) => (
          <button key={num} onClick={() => handlePress(num.toString())}>
            {num}
          </button>
        ))}
      </div>
    </div>
  );
};

export default Keypad;


------------------------------------------------------------------

1. Sync Input with document.title (useEffect + useState)
jsx
Copy
Edit
import React, { useState, useEffect } from 'react';

const TitleSync = () => {
  const [input, setInput] = useState('');

  useEffect(() => {
    document.title = input;
  }, [input]); // Runs whenever input changes

  return (
    <div>
      <h2>Type Below:</h2>
      <input
        type="text"
        value={input}
        onChange={(e) => setInput(e.target.value)}
      />
      <p>Current Title: {document.title}</p>
    </div>
  );
};

export default TitleSync;
✅ Explanation: useEffect updates document.title whenever the input changes.

2. Add a Click Handler to document (useEffect Cleanup)
jsx
Copy
Edit
import React, { useEffect } from 'react';

const ClickHandler = () => {
  useEffect(() => {
    const handleClick = () => {
      console.log('Document clicked!');
    };

    document.addEventListener('click', handleClick);

    return () => {
      document.removeEventListener('click', handleClick); // Cleanup
    };
  }, []);

  return <h2>Click anywhere and check the console!</h2>;
};

export default ClickHandler;
✅ Explanation:

document.addEventListener('click', handleClick) logs clicks.
The cleanup function removes the event listener when the component unmounts.
3. Reddit API with Error Handling (fetch with try...catch)
jsx
Copy
Edit
import React, { useState, useEffect } from 'react';

const RedditPosts = ({ subreddit }) => {
  const [posts, setPosts] = useState([]);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchPosts = async () => {
      setError(null); // Reset error on new request
      try {
        const response = await fetch(`https://www.reddit.com/r/${subreddit}.json`);
        if (!response.ok) {
          throw new Error('Subreddit not found');
        }
        const data = await response.json();
        setPosts(data.data.children.map((child) => child.data));
      } catch (err) {
        setError(err.message);
      }
    };

    fetchPosts();
  }, [subreddit]);

  return (
    <div>
      <h2>Posts from r/{subreddit}</h2>
      {error ? <p style={{ color: 'red' }}>{error}</p> : (
        <ul>
          {posts.map((post) => (
            <li key={post.id}>{post.title}</li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default RedditPosts;


----------------------------------------------------------------------

1️⃣ Navbar Component (Navbar.jsx)
This displays the cart summary in the top-right corner with an icon.

jsx
Copy
Edit
import React from "react";
import { useNavigate } from "react-router-dom";
import { FaShoppingCart } from "react-icons/fa"; // FontAwesome Cart Icon

const Navbar = ({ cart }) => {
  const navigate = useNavigate();

  // Calculate total number of items and total price
  const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
  const totalPrice = cart.reduce((sum, item) => sum + item.price * item.quantity, 0);

  return (
    <nav className="flex justify-between items-center px-6 py-3 bg-white border-b shadow-md">
      <div className="flex space-x-6">
        <a href="/" className="text-lg font-semibold">Items</a>
        <a
          href="#"
          onClick={() => navigate("/cart")}
          className="flex items-center text-lg font-semibold text-gray-700 hover:text-black"
        >
          <FaShoppingCart size={22} />
          {totalItems > 0 && (
            <span className="ml-2 text-sm bg-gray-200 px-2 py-1 rounded">
              {totalItems} items (${totalPrice})
            </span>
          )}
        </a>
      </div>
    </nav>
  );
};

export default Navbar;
2️⃣ Cart Component (Cart.jsx)
This displays cart items, total price, and an empty cart message.

jsx
Copy
Edit
import React from "react";

const Cart = ({ cart }) => {
  // Calculate total price
  const totalPrice = cart.reduce((sum, item) => sum + item.price * item.quantity, 0);

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-4">Cart</h2>

      {cart.length === 0 ? (
        <div className="text-center text-gray-500 mt-10">
          <p className="text-lg">Your cart is empty.</p>
          <p className="text-sm mt-2">Why not add some expensive products to it?</p>
        </div>
      ) : (
        <div>
          {cart.map((item) => (
            <div key={item.id} className="border-b py-4 flex justify-between items-center">
              <div>
                <h4 className="text-lg font-semibold">{item.name}</h4>
                <p className="text-gray-600">${item.price} x {item.quantity}</p>
              </div>
              <p className="font-semibold">${item.price * item.quantity}</p>
            </div>
          ))}
          <h3 className="text-xl font-bold mt-6">Total: ${totalPrice}</h3>
        </div>
      )}
    </div>
  );
};

export default Cart;
What’s Covered?
✅ Exercise 1 → Displays Total: $2032 at the bottom of the cart page.
✅ Exercise 2 → Shows "Your cart is empty" when there are no items.
✅ Exercise 3 → Navbar with cart summary, total price, and clickable icon.



-------------------last 2------------------------------------------

Features Implemented:
✅ Display number of votes
✅ Functioning Upvote & Downvote buttons
✅ Display number of comments
✅ Sort posts by number of upvotes
✅ Title as a real link
✅ Other links (share, save, etc.) are non-functional

1️⃣ Sample Data (postsData.js)
Create a file to store Reddit-like post data.

javascript
Copy
Edit
export const postsData = [
  {
    id: 1,
    title: "Netlify: Our conversion from Angular to React",
    url: "https://netlify.com",
    author: "brianllamar",
    timeAgo: "9 hours ago",
    comments: 10,
    votes: 22,
    avatar: "https://randomuser.me/api/portraits/men/1.jpg"
  },
  {
    id: 2,
    title: "React in patterns - List of design patterns",
    url: "https://github.com",
    author: "magenta_placenta",
    timeAgo: "12 hours ago",
    comments: 13,
    votes: 18,
    avatar: "https://randomuser.me/api/portraits/women/2.jpg"
  },
  {
    id: 3,
    title: "Redux vs MobX vs Flux vs... Do you even need that?",
    url: "https://goshakkk.name",
    author: "goshakkk",
    timeAgo: "8 hours ago",
    comments: 7,
    votes: 7,
    avatar: "https://randomuser.me/api/portraits/men/3.jpg"
  }
];
2️⃣ Post Component (Post.jsx)
This component renders an individual post with vote buttons and comment count.

jsx
Copy
Edit
import React, { useState } from "react";
import { FaArrowUp, FaArrowDown, FaComment } from "react-icons/fa";

const Post = ({ post }) => {
  const [votes, setVotes] = useState(post.votes);

  return (
    <div className="flex items-start space-x-4 p-4 border-b">
      {/* Upvote & Downvote */}
      <div className="flex flex-col items-center">
        <button
          onClick={() => setVotes(votes + 1)}
          className="text-gray-600 hover:text-red-500"
        >
          <FaArrowUp size={20} />
        </button>
        <span className="text-lg font-semibold">{votes}</span>
        <button
          onClick={() => setVotes(votes - 1)}
          className="text-gray-600 hover:text-blue-500"
        >
          <FaArrowDown size={20} />
        </button>
      </div>

      {/* Post Details */}
      <div className="flex-1">
        <a href={post.url} target="_blank" rel="noopener noreferrer" className="text-lg font-bold text-blue-600 hover:underline">
          {post.title}
        </a>
        <p className="text-sm text-gray-500">
          Submitted {post.timeAgo} by <span className="font-semibold">{post.author}</span>
        </p>
        <div className="flex items-center space-x-4 mt-2 text-gray-600 text-sm">
          <span className="flex items-center space-x-1">
            <FaComment size={16} />
            <span>{post.comments} comments</span>
          </span>
          <span>share</span>
          <span>save</span>
          <span>hide</span>
          <span>report</span>
        </div>
      </div>

      {/* Avatar */}
      <img src={post.avatar} alt="avatar" className="w-10 h-10 rounded-full" />
    </div>
  );
};

export default Post;
3️⃣ Main App Component (App.jsx)
This sorts posts by upvotes and renders the list.

jsx
Copy
Edit
import React, { useState } from "react";
import { postsData } from "./postsData";
import Post from "./Post";

const App = () => {
  const [posts, setPosts] = useState(postsData);

  return (
    <div className="max-w-3xl mx-auto mt-6 bg-white shadow-lg rounded-lg">
      <h1 className="text-2xl font-bold text-center p-4 bg-gray-100">Reddit Clone</h1>
      {posts
        .sort((a, b) => b.votes - a.votes) // Sort by upvotes
        .map((post) => (
          <Post key={post.id} post={post} />
        ))}
    </div>
  );
};

export default App;